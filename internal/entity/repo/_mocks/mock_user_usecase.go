// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/faisalhardin/employee-payroll-system/internal/entity/repo/usecase (interfaces: UserUsecaseRepository)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/faisalhardin/employee-payroll-system/internal/entity/model"
	gomock "github.com/golang/mock/gomock"
)

// MockUserUsecaseRepository is a mock of UserUsecaseRepository interface.
type MockUserUsecaseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserUsecaseRepositoryMockRecorder
}

// MockUserUsecaseRepositoryMockRecorder is the mock recorder for MockUserUsecaseRepository.
type MockUserUsecaseRepositoryMockRecorder struct {
	mock *MockUserUsecaseRepository
}

// NewMockUserUsecaseRepository creates a new mock instance.
func NewMockUserUsecaseRepository(ctrl *gomock.Controller) *MockUserUsecaseRepository {
	mock := &MockUserUsecaseRepository{ctrl: ctrl}
	mock.recorder = &MockUserUsecaseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUsecaseRepository) EXPECT() *MockUserUsecaseRepositoryMockRecorder {
	return m.recorder
}

// SignIn mocks base method.
func (m *MockUserUsecaseRepository) SignIn(arg0 context.Context, arg1 model.SignInRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockUserUsecaseRepositoryMockRecorder) SignIn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockUserUsecaseRepository)(nil).SignIn), arg0, arg1)
}
