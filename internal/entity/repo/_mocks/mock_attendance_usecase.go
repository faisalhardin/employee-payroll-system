// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/faisalhardin/employee-payroll-system/internal/entity/repo/usecase (interfaces: AttendanceUsecaseRepository)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/faisalhardin/employee-payroll-system/internal/entity/model"
	gomock "github.com/golang/mock/gomock"
)

// MockAttendanceUsecaseRepository is a mock of AttendanceUsecaseRepository interface.
type MockAttendanceUsecaseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAttendanceUsecaseRepositoryMockRecorder
}

// MockAttendanceUsecaseRepositoryMockRecorder is the mock recorder for MockAttendanceUsecaseRepository.
type MockAttendanceUsecaseRepositoryMockRecorder struct {
	mock *MockAttendanceUsecaseRepository
}

// NewMockAttendanceUsecaseRepository creates a new mock instance.
func NewMockAttendanceUsecaseRepository(ctrl *gomock.Controller) *MockAttendanceUsecaseRepository {
	mock := &MockAttendanceUsecaseRepository{ctrl: ctrl}
	mock.recorder = &MockAttendanceUsecaseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAttendanceUsecaseRepository) EXPECT() *MockAttendanceUsecaseRepositoryMockRecorder {
	return m.recorder
}

// CreatePayrollPeriod mocks base method.
func (m *MockAttendanceUsecaseRepository) CreatePayrollPeriod(arg0 context.Context, arg1 model.PayrollPeriodRequest) (model.PayrollPeriodResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayrollPeriod", arg0, arg1)
	ret0, _ := ret[0].(model.PayrollPeriodResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayrollPeriod indicates an expected call of CreatePayrollPeriod.
func (mr *MockAttendanceUsecaseRepositoryMockRecorder) CreatePayrollPeriod(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayrollPeriod", reflect.TypeOf((*MockAttendanceUsecaseRepository)(nil).CreatePayrollPeriod), arg0, arg1)
}

// GeneratePayroll mocks base method.
func (m *MockAttendanceUsecaseRepository) GeneratePayroll(arg0 context.Context, arg1 model.GeneratePayrollRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePayroll", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GeneratePayroll indicates an expected call of GeneratePayroll.
func (mr *MockAttendanceUsecaseRepositoryMockRecorder) GeneratePayroll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePayroll", reflect.TypeOf((*MockAttendanceUsecaseRepository)(nil).GeneratePayroll), arg0, arg1)
}

// GetEmployeePayslip mocks base method.
func (m *MockAttendanceUsecaseRepository) GetEmployeePayslip(arg0 context.Context, arg1 model.GetPayslipRequest) (model.GetPayslipResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeePayslip", arg0, arg1)
	ret0, _ := ret[0].(model.GetPayslipResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeePayslip indicates an expected call of GetEmployeePayslip.
func (mr *MockAttendanceUsecaseRepositoryMockRecorder) GetEmployeePayslip(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeePayslip", reflect.TypeOf((*MockAttendanceUsecaseRepository)(nil).GetEmployeePayslip), arg0, arg1)
}

// GetPayroll mocks base method.
func (m *MockAttendanceUsecaseRepository) GetPayroll(arg0 context.Context, arg1 model.GetPayrollRequest) (model.GetPayrollResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayroll", arg0, arg1)
	ret0, _ := ret[0].(model.GetPayrollResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayroll indicates an expected call of GetPayroll.
func (mr *MockAttendanceUsecaseRepositoryMockRecorder) GetPayroll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayroll", reflect.TypeOf((*MockAttendanceUsecaseRepository)(nil).GetPayroll), arg0, arg1)
}

// SubmitOvertime mocks base method.
func (m *MockAttendanceUsecaseRepository) SubmitOvertime(arg0 context.Context, arg1 model.SubmitOvertimeRequest) (model.SubmitOvertimeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitOvertime", arg0, arg1)
	ret0, _ := ret[0].(model.SubmitOvertimeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitOvertime indicates an expected call of SubmitOvertime.
func (mr *MockAttendanceUsecaseRepositoryMockRecorder) SubmitOvertime(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitOvertime", reflect.TypeOf((*MockAttendanceUsecaseRepository)(nil).SubmitOvertime), arg0, arg1)
}

// SubmitReimbursement mocks base method.
func (m *MockAttendanceUsecaseRepository) SubmitReimbursement(arg0 context.Context, arg1 model.SubmitReimbursementRequest) (model.SubmitReimbursementResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitReimbursement", arg0, arg1)
	ret0, _ := ret[0].(model.SubmitReimbursementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitReimbursement indicates an expected call of SubmitReimbursement.
func (mr *MockAttendanceUsecaseRepositoryMockRecorder) SubmitReimbursement(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitReimbursement", reflect.TypeOf((*MockAttendanceUsecaseRepository)(nil).SubmitReimbursement), arg0, arg1)
}

// TapIn mocks base method.
func (m *MockAttendanceUsecaseRepository) TapIn(arg0 context.Context, arg1 model.MstAttendance) (model.TapInResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TapIn", arg0, arg1)
	ret0, _ := ret[0].(model.TapInResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TapIn indicates an expected call of TapIn.
func (mr *MockAttendanceUsecaseRepositoryMockRecorder) TapIn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TapIn", reflect.TypeOf((*MockAttendanceUsecaseRepository)(nil).TapIn), arg0, arg1)
}
