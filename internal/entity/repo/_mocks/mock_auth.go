// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/faisalhardin/employee-payroll-system/internal/entity/repo/auth (interfaces: Authenticator)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	http "net/http"
	reflect "reflect"
	time "time"

	auth "github.com/faisalhardin/employee-payroll-system/pkg/middlewares/auth"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthenticator is a mock of Authenticator interface.
type MockAuthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticatorMockRecorder
}

// MockAuthenticatorMockRecorder is the mock recorder for MockAuthenticator.
type MockAuthenticatorMockRecorder struct {
	mock *MockAuthenticator
}

// NewMockAuthenticator creates a new mock instance.
func NewMockAuthenticator(ctrl *gomock.Controller) *MockAuthenticator {
	mock := &MockAuthenticator{ctrl: ctrl}
	mock.recorder = &MockAuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticator) EXPECT() *MockAuthenticatorMockRecorder {
	return m.recorder
}

// AuthHandler mocks base method.
func (m *MockAuthenticator) AuthHandler(arg0 http.Handler) http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthHandler", arg0)
	ret0, _ := ret[0].(http.Handler)
	return ret0
}

// AuthHandler indicates an expected call of AuthHandler.
func (mr *MockAuthenticatorMockRecorder) AuthHandler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthHandler", reflect.TypeOf((*MockAuthenticator)(nil).AuthHandler), arg0)
}

// CreateJWTToken mocks base method.
func (m *MockAuthenticator) CreateJWTToken(arg0 context.Context, arg1 auth.UserJWTPayload, arg2, arg3 time.Time) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJWTToken", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJWTToken indicates an expected call of CreateJWTToken.
func (mr *MockAuthenticatorMockRecorder) CreateJWTToken(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJWTToken", reflect.TypeOf((*MockAuthenticator)(nil).CreateJWTToken), arg0, arg1, arg2, arg3)
}

// GetTokenClaims mocks base method.
func (m *MockAuthenticator) GetTokenClaims(arg0 string) (*auth.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenClaims", arg0)
	ret0, _ := ret[0].(*auth.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenClaims indicates an expected call of GetTokenClaims.
func (mr *MockAuthenticatorMockRecorder) GetTokenClaims(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenClaims", reflect.TypeOf((*MockAuthenticator)(nil).GetTokenClaims), arg0)
}

// HandleAuthMiddleware mocks base method.
func (m *MockAuthenticator) HandleAuthMiddleware(arg0 context.Context, arg1 string) (auth.UserJWTPayload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleAuthMiddleware", arg0, arg1)
	ret0, _ := ret[0].(auth.UserJWTPayload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleAuthMiddleware indicates an expected call of HandleAuthMiddleware.
func (mr *MockAuthenticatorMockRecorder) HandleAuthMiddleware(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleAuthMiddleware", reflect.TypeOf((*MockAuthenticator)(nil).HandleAuthMiddleware), arg0, arg1)
}

// VerifyJWT mocks base method.
func (m *MockAuthenticator) VerifyJWT(arg0 string, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyJWT", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyJWT indicates an expected call of VerifyJWT.
func (mr *MockAuthenticatorMockRecorder) VerifyJWT(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyJWT", reflect.TypeOf((*MockAuthenticator)(nil).VerifyJWT), arg0, arg1)
}
