// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/faisalhardin/employee-payroll-system/internal/entity/repo/db/attendance (interfaces: AttendanceRepository)

// Package attendance is a generated GoMock package.
package attendance

import (
	context "context"
	reflect "reflect"

	model "github.com/faisalhardin/employee-payroll-system/internal/entity/model"
	gomock "github.com/golang/mock/gomock"
)

// MockAttendanceRepository is a mock of AttendanceRepository interface.
type MockAttendanceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAttendanceRepositoryMockRecorder
}

// MockAttendanceRepositoryMockRecorder is the mock recorder for MockAttendanceRepository.
type MockAttendanceRepositoryMockRecorder struct {
	mock *MockAttendanceRepository
}

// NewMockAttendanceRepository creates a new mock instance.
func NewMockAttendanceRepository(ctrl *gomock.Controller) *MockAttendanceRepository {
	mock := &MockAttendanceRepository{ctrl: ctrl}
	mock.recorder = &MockAttendanceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAttendanceRepository) EXPECT() *MockAttendanceRepositoryMockRecorder {
	return m.recorder
}

// CreatePayrollPeriod mocks base method.
func (m *MockAttendanceRepository) CreatePayrollPeriod(arg0 context.Context, arg1 *model.MstPayrollPeriod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayrollPeriod", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePayrollPeriod indicates an expected call of CreatePayrollPeriod.
func (mr *MockAttendanceRepositoryMockRecorder) CreatePayrollPeriod(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayrollPeriod", reflect.TypeOf((*MockAttendanceRepository)(nil).CreatePayrollPeriod), arg0, arg1)
}

// GetAttendance mocks base method.
func (m *MockAttendanceRepository) GetAttendance(arg0 context.Context, arg1 model.MstAttendance) (model.MstAttendance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttendance", arg0, arg1)
	ret0, _ := ret[0].(model.MstAttendance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttendance indicates an expected call of GetAttendance.
func (mr *MockAttendanceRepositoryMockRecorder) GetAttendance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttendance", reflect.TypeOf((*MockAttendanceRepository)(nil).GetAttendance), arg0, arg1)
}

// GetOvertime mocks base method.
func (m *MockAttendanceRepository) GetOvertime(arg0 context.Context, arg1 model.TrxOvertime) (model.TrxOvertime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOvertime", arg0, arg1)
	ret0, _ := ret[0].(model.TrxOvertime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOvertime indicates an expected call of GetOvertime.
func (mr *MockAttendanceRepositoryMockRecorder) GetOvertime(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOvertime", reflect.TypeOf((*MockAttendanceRepository)(nil).GetOvertime), arg0, arg1)
}

// GetPayrollDetail mocks base method.
func (m *MockAttendanceRepository) GetPayrollDetail(arg0 context.Context, arg1 model.GetDtlPayrollRequest) (model.DtlPayroll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayrollDetail", arg0, arg1)
	ret0, _ := ret[0].(model.DtlPayroll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayrollDetail indicates an expected call of GetPayrollDetail.
func (mr *MockAttendanceRepositoryMockRecorder) GetPayrollDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayrollDetail", reflect.TypeOf((*MockAttendanceRepository)(nil).GetPayrollDetail), arg0, arg1)
}

// GetPayrollPeriod mocks base method.
func (m *MockAttendanceRepository) GetPayrollPeriod(arg0 context.Context, arg1 int64) (model.MstPayrollPeriod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayrollPeriod", arg0, arg1)
	ret0, _ := ret[0].(model.MstPayrollPeriod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayrollPeriod indicates an expected call of GetPayrollPeriod.
func (mr *MockAttendanceRepositoryMockRecorder) GetPayrollPeriod(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayrollPeriod", reflect.TypeOf((*MockAttendanceRepository)(nil).GetPayrollPeriod), arg0, arg1)
}

// GetPayslips mocks base method.
func (m *MockAttendanceRepository) GetPayslips(arg0 context.Context, arg1 model.GetPayslipRequest) ([]model.TrxUserPayslip, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayslips", arg0, arg1)
	ret0, _ := ret[0].([]model.TrxUserPayslip)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayslips indicates an expected call of GetPayslips.
func (mr *MockAttendanceRepositoryMockRecorder) GetPayslips(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayslips", reflect.TypeOf((*MockAttendanceRepository)(nil).GetPayslips), arg0, arg1)
}

// ListAttendanceByParams mocks base method.
func (m *MockAttendanceRepository) ListAttendanceByParams(arg0 context.Context, arg1 model.ListAttendanceParams) ([]model.MstAttendance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAttendanceByParams", arg0, arg1)
	ret0, _ := ret[0].([]model.MstAttendance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAttendanceByParams indicates an expected call of ListAttendanceByParams.
func (mr *MockAttendanceRepositoryMockRecorder) ListAttendanceByParams(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttendanceByParams", reflect.TypeOf((*MockAttendanceRepository)(nil).ListAttendanceByParams), arg0, arg1)
}

// ListOvertimeByParams mocks base method.
func (m *MockAttendanceRepository) ListOvertimeByParams(arg0 context.Context, arg1 model.ListOvertimeParams) ([]model.TrxOvertime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOvertimeByParams", arg0, arg1)
	ret0, _ := ret[0].([]model.TrxOvertime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOvertimeByParams indicates an expected call of ListOvertimeByParams.
func (mr *MockAttendanceRepositoryMockRecorder) ListOvertimeByParams(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOvertimeByParams", reflect.TypeOf((*MockAttendanceRepository)(nil).ListOvertimeByParams), arg0, arg1)
}

// ListReimbursementByParams mocks base method.
func (m *MockAttendanceRepository) ListReimbursementByParams(arg0 context.Context, arg1 model.ListReimbursementParams) ([]model.TrxReimbursement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReimbursementByParams", arg0, arg1)
	ret0, _ := ret[0].([]model.TrxReimbursement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReimbursementByParams indicates an expected call of ListReimbursementByParams.
func (mr *MockAttendanceRepositoryMockRecorder) ListReimbursementByParams(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReimbursementByParams", reflect.TypeOf((*MockAttendanceRepository)(nil).ListReimbursementByParams), arg0, arg1)
}

// RecordAttendance mocks base method.
func (m *MockAttendanceRepository) RecordAttendance(arg0 context.Context, arg1 *model.MstAttendance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordAttendance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordAttendance indicates an expected call of RecordAttendance.
func (mr *MockAttendanceRepositoryMockRecorder) RecordAttendance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordAttendance", reflect.TypeOf((*MockAttendanceRepository)(nil).RecordAttendance), arg0, arg1)
}

// SubmitOvertime mocks base method.
func (m *MockAttendanceRepository) SubmitOvertime(arg0 context.Context, arg1 *model.TrxOvertime) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitOvertime", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitOvertime indicates an expected call of SubmitOvertime.
func (mr *MockAttendanceRepositoryMockRecorder) SubmitOvertime(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitOvertime", reflect.TypeOf((*MockAttendanceRepository)(nil).SubmitOvertime), arg0, arg1)
}

// SubmitPayroll mocks base method.
func (m *MockAttendanceRepository) SubmitPayroll(arg0 context.Context, arg1 model.DtlPayroll) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitPayroll", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitPayroll indicates an expected call of SubmitPayroll.
func (mr *MockAttendanceRepositoryMockRecorder) SubmitPayroll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitPayroll", reflect.TypeOf((*MockAttendanceRepository)(nil).SubmitPayroll), arg0, arg1)
}

// SubmitPayslips mocks base method.
func (m *MockAttendanceRepository) SubmitPayslips(arg0 context.Context, arg1 []model.TrxUserPayslip) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitPayslips", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitPayslips indicates an expected call of SubmitPayslips.
func (mr *MockAttendanceRepositoryMockRecorder) SubmitPayslips(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitPayslips", reflect.TypeOf((*MockAttendanceRepository)(nil).SubmitPayslips), arg0, arg1)
}

// SubmitReimbursement mocks base method.
func (m *MockAttendanceRepository) SubmitReimbursement(arg0 context.Context, arg1 *model.TrxReimbursement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitReimbursement", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitReimbursement indicates an expected call of SubmitReimbursement.
func (mr *MockAttendanceRepositoryMockRecorder) SubmitReimbursement(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitReimbursement", reflect.TypeOf((*MockAttendanceRepository)(nil).SubmitReimbursement), arg0, arg1)
}

// UpdateAttendance mocks base method.
func (m *MockAttendanceRepository) UpdateAttendance(arg0 context.Context, arg1 *model.MstAttendance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAttendance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAttendance indicates an expected call of UpdateAttendance.
func (mr *MockAttendanceRepositoryMockRecorder) UpdateAttendance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAttendance", reflect.TypeOf((*MockAttendanceRepository)(nil).UpdateAttendance), arg0, arg1)
}

// UpdateOvertime mocks base method.
func (m *MockAttendanceRepository) UpdateOvertime(arg0 context.Context, arg1 *model.TrxOvertime) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOvertime", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOvertime indicates an expected call of UpdateOvertime.
func (mr *MockAttendanceRepositoryMockRecorder) UpdateOvertime(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOvertime", reflect.TypeOf((*MockAttendanceRepository)(nil).UpdateOvertime), arg0, arg1)
}

// UpdatePayrollPeriod mocks base method.
func (m *MockAttendanceRepository) UpdatePayrollPeriod(arg0 context.Context, arg1 *model.MstPayrollPeriod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePayrollPeriod", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePayrollPeriod indicates an expected call of UpdatePayrollPeriod.
func (mr *MockAttendanceRepositoryMockRecorder) UpdatePayrollPeriod(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePayrollPeriod", reflect.TypeOf((*MockAttendanceRepository)(nil).UpdatePayrollPeriod), arg0, arg1)
}

// UpdateReimbursement mocks base method.
func (m *MockAttendanceRepository) UpdateReimbursement(arg0 context.Context, arg1 *model.TrxReimbursement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReimbursement", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReimbursement indicates an expected call of UpdateReimbursement.
func (mr *MockAttendanceRepositoryMockRecorder) UpdateReimbursement(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReimbursement", reflect.TypeOf((*MockAttendanceRepository)(nil).UpdateReimbursement), arg0, arg1)
}
